#! /bin/sh
# Provides:          weston
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Weston compositor boot script for ico-ivi
# Description:       This script starts the Weston compositor and ico-uxf-HomeScreen at boot.

# Do NOT "set -e"

backend=

# Use the Weston DRM backend if $DISPLAY is set and X isn't running
#since Weston won't be able use the X11 backend.
#
# This allows this script to start Weston with either the X11 or DRM
#backends.
if [ -z `pidof Xorg` ] && [ -n "$DISPLAY" ]; then
    backend="--backend=drm-backend.so"
fi

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="Weston compositor"
NAME=weston
DAEMON=/usr/bin/weston
DAEMON_ARGS="$backend --idle-time=0 --log=/var/log/weston.log"
PIDFILE=/var/run/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME
export HOME="/opt/home/root"

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
do_start()
{
	# Make sure we have a sane XDG_RUNTIME_DIR environment
	# variable set.
	if [ -z "${XDG_RUNTIME_DIR}" ]; then
	    . /etc/profile.d/weston.sh
	fi

	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started
	start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON --test > /dev/null \
		|| return 1
	
	# kill pulseaudio and weston, and start pulseaudio
	/usr/bin/killall pulseaudio > /dev/null 2>&1
	/usr/bin/killall weston > /dev/null 2>&1
	/bin/sleep 0.2
	/usr/bin/killall -9 pulseaudio > /dev/null 2>&1
	/usr/bin/killall -9 weston > /dev/null 2>&1
	/bin/sleep 0.2
	/usr/bin/pulseaudio --system &
	/bin/sleep 0.2
	
	# Start Device Input Controller for eGalax TouchPanel
	#/usr/bin/ico_ictl-touch_egalax -t
	/usr/bin/ico_ictl-touch_egalax
	# Remove weston log
	/bin/rm -f /var/log/weston.log
	/bin/ps ax | /bin/grep launchpad_preloading | /bin/grep -v grep > /dev/null
	if [ "$?" = "0" ] ; then
		/usr/bin/killall launchpad_preloading_preinitializing_daemon
		/bin/sleep 0.3
	fi
	/usr/bin/launchpad_preloading_preinitializing_daemon &

	# start-stop-daemon --start --background --quiet --pidfile $PIDFILE --exec $DAEMON -- \
	#	$DAEMON_ARGS \
	#	|| return 2
	$DAEMON $DAEMON_ARGS &
	weston_pid=$!
	/bin/sleep 0.2

	if [ $weston_pid = 0 ]; then
	    return 2
	else
	    echo $weston_pid > $PIDFILE
	fi

	# Add code here, if necessary, that waits for the process to be ready
	# to handle requests from services started subsequently which depend
	# on this one.  As a last resort, sleep for some time.

	# ************************************************************
	# HACK TO WORK AROUND INSUFFICIENT ACCESS PERMISSIONS FOR
	# UNPRIVILEGED USERS.
	#
	# Ideally we should launch weston with weston-launch with the
	# appropriate --user flag.  Unfortunately, weston-launch isn't
	# available due to missing package dependencies.
	# ************************************************************
	wayland_socket="$XDG_RUNTIME_DIR/wayland-0"
	MAX_ATTEMPTS=8
	attempt=0
	while [ ! -f $wayland_socket ] && [ $attempt -lt $MAX_ATTEMPTS ]
	do
		/bin/sleep 0.5
		attempt=$[$attempt + 1]
	done
	/bin/chmod 777 $wayland_socket

	# Start wayland-client for display mouse cursor
	#/usr/bin/nice -19 /usr/bin/wayland-smoke &

	## if pulseaudio dose not start ... kick pulseaudio
	/bin/ps ax | /bin/grep pulseaudio | /bin/grep -v grep > /dev/null
	if [ "$?" = "1" ] ; then
    		/usr/bin/pulseaudio --system &
    		/bin/sleep 1
	fi

	# Start HomeScreen
	/bin/sleep 1
	/bin/mkdir /tmp/log/
	/bin/chmod -R 0777 /tmp/log
	/bin/rm -f /tmp/log/*
	/usr/bin/killall menu-screen
	/usr/bin/killall menu-daemon
	/usr/bin/killall power_manager
	/usr/bin/launch_app org.tizen.ico.homescreen &

	# ***********************************************************
	# HACK TO WORK AROUND BROKEN INFINITE LOOPS IN BOOT ANIMATION
	# VIRTUAL KEYBOARD BOOT SCRIPTS.
	# ***********************************************************
	touch /tmp/.X0-lock
	touch /tmp/.wm_ready
	# ***********************************************************
}

#
# Function that stops the daemon/service
#
do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	#start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE --name $NAME
	start-stop-daemon --stop --quiet --pidfile $PIDFILE --name $NAME
	RETVAL="$?"
	[ "$RETVAL" = 2 ] && return 2
	# Wait for children to finish too if this is a daemon that forks
	# and if the daemon is only ever run from this initscript.
	# If the above conditions are not satisfied then add some other code
	# that waits for the process to drop all resources that could be
	# needed by services started subsequently.  A last resort is to
	# sleep for some time.
	#start-stop-daemon --stop --quiet --oknodo --retry=0/30/KILL/5 --exec $DAEMON
	start-stop-daemon --stop --quiet --oknodo --exec $DAEMON
	[ "$?" = 2 ] && return 2
	# Many daemons don't delete their pidfiles when they exit.
	rm -f $PIDFILE
	return "$RETVAL"
}

#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
	#
	# If the daemon can reload its configuration without
	# restarting (for example, when it is sent a SIGHUP),
	# then implement that here.
	#
	start-stop-daemon --stop --signal 1 --quiet --pidfile $PIDFILE --name $NAME
	return 0
}

case "$1" in
  start)
	[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
	do_start
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  status)
       status_of_proc "$DAEMON" "$NAME" && exit 0 || exit $?
       ;;
  #reload|force-reload)
	#
	# If do_reload() is not implemented then leave this commented out
	# and leave 'force-reload' as an alias for 'restart'.
	#
	#log_daemon_msg "Reloading $DESC" "$NAME"
	#do_reload
	#log_end_msg $?
	#;;
  restart|force-reload)
	#
	# If the "reload" option is implemented then remove the
	# 'force-reload' alias
	#
	log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
	  	# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  *)
	#echo "Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}" >&2
	echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
	exit 3
	;;
esac

:
